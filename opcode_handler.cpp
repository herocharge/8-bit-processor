#include "opcode_handler.h"

Opcode_handler::Opcode_handler(){
    std::vector<voidFunctionType> funcPointers = {
        NOP_0x00, MOVAA_0x7F, MOVAB_0x78, MOVAC_0x79, MOVAD_0x7A, MOVAE_0x7B, MOVAH_0x7C, MOVAL_0x7D, MOVAM_0x7E, LDAXB_0x0A, LDAXD_0x1A, LDA_0x3Aword, MOVBA_0x47, MOVBB_0x40, MOVBC_0x41, MOVBD_0x42, MOVBE_0x43, MOVBH_0x44, MOVBL_0x45, MOVBM_0x46, MOVCA_0x4F, MOVCB_0x48, MOVCC_0x49, MOVCD_0x4A, MOVCE_0x4B, MOVCH_0x4C, MOVCL_0x4D, MOVCM_0x4E, MOVDA_0x57, MOVDB_0x50, MOVDC_0x51, MOVDD_0x52, MOVDE_0x53, MOVDH_0x54, MOVDL_0x55, MOVDM_0x56, MOVEA_0x5F, MOVEB_0x58, MOVEC_0x59, MOVED_0x5A, MOVEE_0x5B, MOVEH_0x5C, MOVEL_0x5D, MOVEM_0x5E, MOVHA_0x67, MOVHB_0x60, MOVHC_0x61, MOVHD_0x62, MOVHE_0x63, MOVHH_0x64, MOVHL_0x65, MOVHM_0x66, MOVLA_0x6F, MOVLB_0x68, MOVLC_0x69, MOVLD_0x6A, MOVLE_0x6B, MOVLH_0x6C, MOVLL_0x6D, MOVLM_0x6E, MOVMA_0x77, MOVMB_0x70, MOVMC_0x71, MOVMD_0x72, MOVME_0x73, MOVMH_0x74, MOVML_0x75, MVIA_0x3Eword, MVIB_0x06word, MVIC_0x0Eword, MVID_0x16word, MVIE_0x1Eword, MVIH_0x26word, MVIL_0x2Eword, MVIM_0x36word, STAXB_0x02, STAXD_0x12, STA_0x32word, LXIBC_0x01doubleword, LXIDE_0x11doubleword, LXIHL_0x21doubleword, LXISP_0x31doubleword, XCHNG_0xEB, XTHL_0xE3, ADDA_0x87, ADDB_0x80, ADDC_0x81, ADDD_0x82, ADDE_0x83, ADDH_0x84, ADDL_0x85, ADDM_0x86, ADI_0xC6word, ADCA_0x8F, ADCB_0x88, ADCC_0x89, ADCD_0x8A, ADCE_0x8B, ADCH_0x8C, ADCL_0x8D, ADCM_0x8E, ACI_0xCEword, SUBA_0x97, SUBB_0x90, SUBC_0x91, SUBD_0x92, SUBE_0x93, SUBH_0x94, SUBL_0x95, SUBM_0x96, SUI_0xD6word, SBBA_0x9F, SBBB_0x98, SBBC_0x99, SBBD_0x9A, SBBE_0x9B, SBBH_0x9C, SBBL_0x9D, SBBM_0x9E, SBI_0xDEword, DADBC_0x09, DADDE_0x19, DADHL_0x29, DADSP_0x39, INRA_0x3C, INRB_0x04, INRC_0x0C, INRD_0x14, INRE_0x1C, INRH_0x24, INRL_0x2C, INRM_0x34, DCRA_0x3D, DCRB_0x05, DCRC_0x0D, DCRD_0x15, DCRE_0x1D, DCRH_0x25, DCRL_0x2D, DCRM_0x35, INXBC_0x03, INXDE_0x13, INXHL_0x23, INXSP_0x33, DCXBC_0x0B, DCXDE_0x1B, DCXHL_0x2B, DCXSP_0x3B, RLC_0x07, RRC_0x0F, RAL_0x17, RAR_0x1F, ANAA_0xA7, ANAB_0xA0, ANAC_0xA1, ANAD_0xA2, ANAE_0xA3, ANAH_0xA4, ANAL_0xA5, ANAM_0xA6, ANI_0xE6word, XRAA_0xAF, XRAB_0xA8, XRAC_0xA9, XRAD_0xAA, XRAE_0xAB, XRAH_0xAC, XRAL_0xAD, XRAM_0xAE, XRI_0xEEword, ORAA_0xB7, ORAB_0xB0, ORAC_0xB1, ORAD_0xB2, ORAE_0xB3, ORAH_0xB4, ORAL_0xB5, ORAM_0xB6, ORI_0xF6word, CMPA_0xBF, CMPB_0xB8, CMPC_0xB9, CMPD_0xBA, CMPE_0xBB, CMPH_0xBC, CMPL_0xBD, CMPM_0xBE, CPI_0xFEword, JMP_0xC3doubleword, JNZ_0xC2doubleword, JZ_0xCAdoubleword, JNC_0xD2doubleword, JC_0xDAdoubleword, JPO_0xE2doubleword, JPE_0xEAdoubleword, JP_0xF2doubleword, JM_0xFAdoubleword, PCHL_0xE9, CALL_0XCDdoubleword, CNZ_0xC4doubleword, CZ_0xCCdoubleword, CNC_0xD4doubleword, CC_0xDCdoubleword, RET_0xC9
    };
    std::vector<word_t> opcodes = {
        0x00, 0x7F, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x0A, 0x1A, 0x3A, 0x47, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x4F, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x57, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x5F, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x67, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x6F, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x77, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x3E, 0x06, 0x0E, 0x16, 0x1E, 0x26, 0x2E, 0x36, 0x02, 0x12, 0x32, 0x01, 0x11, 0x21, 0x31, 0xEB, 0xE3, 0x87, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0xC6, 0x8F, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0xCE, 0x97, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0xD6, 0x9F, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0xDE, 0x09, 0x19, 0x29, 0x39, 0x3C, 0x04, 0x0C, 0x14, 0x1C, 0x24, 0x2C, 0x34, 0x3D, 0x05, 0x0D, 0x15, 0x1D, 0x25, 0x2D, 0x35, 0x03, 0x13, 0x23, 0x33, 0x0B, 0x1B, 0x2B, 0x3B, 0x07, 0x0F, 0x17, 0x1F, 0xA7, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xE6, 0xAF, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xEE, 0xB7, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xF6, 0xBF, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xFE, 0xC3, 0xC2, 0xCA, 0xD2, 0xDA, 0xE2, 0xEA, 0xF2, 0xFA, 0xE9, 0XCD, 0xC4, 0xCC, 0xD4, 0xDC, 0xC9
    };
    std::vector<word_t> single_param_opcodes = {
        0x3A, 0x3E, 0x06, 0x0E, 0x16, 0x1E, 0x26, 0x2E, 0x36, 0x32, 0xC6, 0xD6, 0xDE, 0xE6, 0xEE, 0xF6, 0xFE
    };
    std::vector<word_t> double_param_opcodes = {
        0x01, 0x11, 0x21, 0x31, 0xC3, 0xC2, 0xCA, 0xD2, 0xDA, 0xE2, 0xEA, 0xF2, 0xFA, 0XCD, 0xC4, 0xCC, 0xD4, 0xDC
    };
    int no_of_procedures = funcPointers.size();
    assert(funcPointers.size() == opcodes.size());
    for(int i = 0; i < no_of_procedures; i++){
        procedures[opcodes[i]] = funcPointers[i]; 
        parameter_count[opcodes[i]] = 0;
    }
    for(auto opcode : single_param_opcodes)
        parameter_count[opcode] = 1;
    for(auto opcode : double_param_opcodes)
        parameter_count[opcode] = 2;
}

bool Opcode_handler::is_valid(word_t opcode){
    return opcode <= 0x7f;
}

uint8_t Opcode_handler::get_opcode_pcount(word_t opcode){
    if(!is_valid(opcode))return 0; // Exit 
    return parameter_count[opcode];
}

voidFunctionType Opcode_handler::get_opcode_procedure(word_t opcode){
    if(!is_valid(opcode))return NOP_0x00;
    return procedures[opcode];
}